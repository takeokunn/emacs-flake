#+TITLE: Configurations for GNU Emacs
#+AUTHOR: takeokunn
#+EMAIL: bararararatty@gmail.com
#+STARTUP: content
#+STARTUP: fold
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="https://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>
* はじめに
** 基本情報
- repo: [[http://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]
- twitter: [[https://twitter.com/takeokunn][たけてぃ@takeokunn]]
- blog: [[https://takeokunn.org][https://takeokunn.org]]
** See also
- [[./early-init][early-init.org]]
- [[./yasnippets][yasnippets.org]]
- [[./elfeed][elfeed.org]]
* Initialize
** Header
#+begin_src emacs-lisp :tangle yes
  ;; init.el --- My init.el -*- lexical-binding: t -*-
  ;; Configurations for Emacs
  ;;                                         Takeo Obara  <bararararatty@gmail.com>
#+end_src
** env
#+begin_src emacs-lisp :tangle yes
  (defconst my/enable-profile t
    "If true, enable profile")
#+end_src
* Macro Utilities
** when-darwin
#+begin_src emacs-lisp :tangle yes
  (defmacro when-darwin (&rest body)
    (when (string= system-type "darwin")
      `(progn ,@body)))
#+end_src
** when-darwin-not-window-system
#+begin_src emacs-lisp :tangle yes
  (defmacro when-darwin-not-window-system (&rest body)
    (when (and (string= system-type "darwin")
               window-system)
      `(progn ,@body)))
#+end_src
* Boot
** user
#+begin_src emacs-lisp :tangle yes
  (setq user-full-name "takeokunn")
  (setq user-mail-address "bararararatty@gmail.com")
#+end_src
** profile
#+begin_src emacs-lisp :tangle yes
  (when my/enable-profile
    (require 'profiler)
    (profiler-start 'cpu))
#+end_src
** Magic File Name を一時的に無効にする
#+begin_src emacs-lisp :tangle yes
  (defconst my/saved-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)
#+end_src
** 起動時間計測
#+begin_src emacs-lisp :tangle yes
  (defconst my/before-load-init-time (current-time))

  ;;;###autoload
  (defun my/load-init-time ()
    "Loading time of user init files including time for `after-init-hook'."
    (let ((time1 (float-time
                  (time-subtract after-init-time my/before-load-init-time)))
          (time2 (float-time
                  (time-subtract (current-time) my/before-load-init-time))))
      (message (concat "Loading init files: %.0f [msec], "
                       "of which %.f [msec] for `after-init-hook'.")
               (* 1000 time1) (* 1000 (- time2 time1)))))
  (add-hook 'after-init-hook #'my/load-init-time t)

  (defvar my/tick-previous-time my/before-load-init-time)

  (defun my/emacs-init-time ()
    "Emacs booting time in msec."
    (interactive)
    (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
             (* 1000
                (float-time (time-subtract
                             after-init-time
                             before-init-time)))))

  (add-hook 'after-init-hook #'my/emacs-init-time)
#+end_src
** autoload-if-found
#+begin_src emacs-lisp :tangle yes
  ;;;###autoload
  (defun autoload-if-found (functions file &optional docstring interactive type)
    "set autoload iff. FILE has found."
    (when (locate-library file)
      (dolist (f functions)
        (autoload f file docstring interactive type))
      t))
#+end_src
** common lispを使う
#+begin_src emacs-lisp :tangle yes
  (eval-and-compile
    (setq byte-compile-warnings '(cl-functions))
    (require 'cl-lib nil t))
#+end_src
* Basic
** 末尾のスペースを可視化する
#+begin_src emacs-lisp :tangle yes
  (defun my/disable-show-trailing-whitespace ()
    (setq show-trailing-whitespace nil))

  (with-eval-after-load 'comint
    (add-hook 'comint-mode-hook #'my/disable-show-trailing-whitespace))

  (with-eval-after-load 'esh-mode
    (add-hook 'eshell-mode-hook #'my/disable-show-trailing-whitespace))

  (with-eval-after-load 'eww
    (add-hook 'eww-mode-hook #'my/disable-show-trailing-whitespace))

  (with-eval-after-load 'minibuffer
    (add-hook 'minibuffer-inactive-mode-hook #'my/disable-show-trailing-whitespace))

  (with-eval-after-load 'dashboard
    (add-hook 'dashboard-mode-hook #'my/disable-show-trailing-whitespace))

  (with-eval-after-load 'simple
    (add-hook 'fundamental-mode-hook #'my/disable-show-trailing-whitespace))
#+END_SRC
** 行番号を表示する
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(global-display-line-numbers-mode) "display-line-numbers" nil t)

  (add-hook 'emacs-startup-hook #'global-display-line-numbers-mode)

  (with-eval-after-load 'display-line-numbers
    (setopt display-line-numbers-grow-only t))
#+END_SRC
** C-kで行削除
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'simple
    (setopt kill-whole-line t))
#+END_SRC
** カッコの中をハイライトする
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook #'show-paren-mode)

  (with-eval-after-load 'paren
    (setopt show-paren-style 'mixed))
#+END_SRC
** カッコが自動的に作られるようにする
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook #'electric-pair-mode)
#+END_SRC
** coding system
#+begin_src emacs-lisp :tangle yes
  ;; language and locale
  (setq system-time-locale "C")

  ;; coding system
  (add-hook 'emacs-startup-hook
            #'(lambda ()
                (set-default-coding-systems 'utf-8-unix)
                (prefer-coding-system 'utf-8-unix)
                (set-selection-coding-system 'utf-8-unix)))

  ;; prefer-coding-system take effect equally to follows
  (setq locale-coding-system 'utf-8-unix)
  (add-hook 'emacs-startup-hook
            #'(lambda ()
                (set-buffer-file-coding-system 'utf-8-unix)
                (set-file-name-coding-system 'utf-8-unix)
                (set-terminal-coding-system 'utf-8-unix)
                (set-keyboard-coding-system 'utf-8-unix)))
#+end_src
** global-auto-revert-mode
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook #'global-auto-revert-mode)
#+end_src
** yes/no to y/n
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook
            #'(lambda ()
                (fset 'yes-or-no-p 'y-or-n-p)))
#+end_src
** global keybind
#+begin_src emacs-lisp :tangle yes
  (keymap-global-set "M-¥" #'(lambda () (interactive) (insert "\\")))
  (keymap-global-set "C-a" #'back-to-indentation)
  (keymap-global-set "C-z" nil)
  (keymap-global-set "C-;" #'comment-dwim)
  (keymap-global-set "C-M-/" #'undo-redo)
  (keymap-global-set "C-c i" #'find-function)
  (keymap-global-set "C-c C-o" #'org-open-at-point)
  (keymap-global-set "C-x C-o" #'other-window)
  (keymap-global-set "M-h" #'backward-kill-word)

  (keymap-global-set "C-x l" 'next-buffer)
  (keymap-global-set "C-x h" 'previous-buffer)
  (keymap-global-set "C-x C-b" #'switch-to-buffer)

  (keymap-global-set "C-x C-k" nil)

  (when window-system
    (keymap-global-set "C-x C-c" nil))
#+END_SRC
** minibuffer
#+begin_src emacs-lisp :tangle yes
  (define-key minibuffer-mode-map (kbd "C-h") #'delete-backward-char)
  (define-key minibuffer-mode-map (kbd "M-h") #'backward-kill-word)
  (define-key minibuffer-mode-map (kbd "C-j") #'exit-minibuffer)
  (define-key minibuffer-mode-map (kbd "M-RET") #'exit-minibuffer)
#+end_src
** savehistを有効にする
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook #'savehist-mode)
#+end_src
** [mac] clipboardに入るようにする
#+begin_src emacs-lisp :tangle yes
  (defun my/copy-from-osx ()
    (shell-command-to-string "pbpaste"))

  (defun my/paste-to-osx (text)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))

  (when-darwin-not-window-system
   (setq interprogram-cut-function #'my/paste-to-osx)
   (setq interprogram-paste-function #'my/copy-from-osx))
#+end_src
** pluginをnative compする
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'comp-run
    (setopt native-comp-async-jobs-number 8)
    (setopt native-comp-speed 2)
    (setopt native-comp-always-compile t))
#+end_src
** native compのwarningを抑える
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'warnings
    (setopt warning-suppress-types '((comp))))
#+end_src
** 同一bufferの名前を変える
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'uniquify
    (setopt uniquify-buffer-name-style 'post-forward-angle-brackets))
#+end_src
** killできないようにする
#+begin_src emacs-lisp :tangle yes
  (with-current-buffer "*scratch*"
    (emacs-lock-mode 'kill))

  (with-current-buffer "*Messages*"
    (emacs-lock-mode 'kill))
#+end_src
** 日時表示
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'time
    (setopt display-time-24hr-format t))
#+end_src
** warning
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'warnings
    (setopt warning-minimum-level :error))
#+end_src
** fontset
#+begin_src emacs-lisp :tangle yes
  (defconst my/enable-warning-log nil)

  (defun set-fontset-font:around (set-fontset-font name target font-spec &optional frame add)
    "Warn if specified font is not installed."
    (if (stringp font-spec)
        (setq font-spec (font-spec :family font-spec)))
    (if (and (fontp font-spec)
             (null (find-font font-spec))
             my/enable-warning-log)
        (warn "set-fontset-font: font %s is not found." (font-get font-spec :family))
      (ignore-errors
        (funcall set-fontset-font name target font-spec frame add))))

  (advice-add 'set-fontset-font
              :around #'set-fontset-font:around)

  ;; reset all settings in default fontset
  (add-hook 'emacs-startup-hook
            #'(lambda ()
                (when (functionp 'set-fontset-font)
                  (if (find-font (font-spec :family "Noto Sans"))
                      (set-fontset-font t '(0 . #x3fffff) "Noto Sans"))

                  ;; multiple platform
                  (set-fontset-font t 'latin "Noto Sans")
                  (set-fontset-font t 'greek "Noto Sans")
                  (set-fontset-font t 'phonetic "Noto Sans")
                  (set-fontset-font t 'coptic "Noto Sans Coptic")
                  (set-fontset-font t 'coptic "Noto Sans Symbols2" nil 'append)
                  (set-fontset-font t 'cyrillic "Noto Sans")
                  (set-fontset-font t 'armenian "Noto Sans Armenian")
                  (set-fontset-font t 'hebrew "Noto Sans Hebrew")
                  (set-fontset-font t 'arabic "Noto Sans Arabic")
                  (set-fontset-font t 'syriac "Noto Sans Syriac")
                  (set-fontset-font t 'thaana "Noto Sans Thaana")
                  (set-fontset-font t 'nko "Noto Sans N'Ko")
                  (set-fontset-font t 'samaritan "Noto Sans Samaritan")
                  (set-fontset-font t 'mandaic "Noto Sans Mandaic")
                  (set-fontset-font t 'devanagari "Noto Sans Devanagari")
                  (set-fontset-font t 'bengali "Noto Sans Bengali")
                  (set-fontset-font t 'gurmukhi "Noto Sans Gurmukhi")
                  (set-fontset-font t 'gujarati "Noto Sans Gujanrati")
                  (set-fontset-font t 'oriya "Noto Sans Oriya")
                  (set-fontset-font t 'tamil "Noto Sans Tamil")
                  (set-fontset-font t 'tamil "Noto Sans Tamil Supplement" nil 'append)
                  (set-fontset-font t 'telugu "Noto Sans Telugu")
                  (set-fontset-font t 'kannada "Noto Sans Kannada")
                  (set-fontset-font t 'malayalam "Noto Sans Malayalam")
                  (set-fontset-font t 'sinhala "Noto Sans Sinhala")
                  (set-fontset-font t 'thai "Noto Sans Thai")
                  (set-fontset-font t 'lao "Noto Sans Lao")
                  (set-fontset-font t 'tibetan "Noto Sans Tibetan")
                  (set-fontset-font t 'burmese "Noto Sans Myanmar")
                  (set-fontset-font t 'georgian "Noto Sans Georgian")
                  (set-fontset-font t 'hangul "Noto Sans CJK KR")
                  (set-fontset-font t 'ethiopic "Noto Sans Ethiopic")
                  (set-fontset-font t 'cherokee "Noto Sans Cherokee")
                  (set-fontset-font t 'canadian-aboriginal "Noto Sans Canadian Aboriginal")
                  (set-fontset-font t 'ogham "Noto Sans Ogham")
                  (set-fontset-font t 'runic "Noto Sans Runic")
                  (set-fontset-font t 'tagalog "Noto Sans Tagalog")
                  (set-fontset-font t 'hanunoo "Noto Sans Hanunoo")
                  (set-fontset-font t 'buhid "Noto Sans Buhid")
                  (set-fontset-font t 'tagbanwa "Noto Sans Tagbanwa")
                  (set-fontset-font t 'khmer "Noto Sans Khmer")
                  (set-fontset-font t 'mongolian "Noto Sans Mongolian")
                  (set-fontset-font t 'limbu "Noto Sans Limbu")
                  (set-fontset-font t 'tai-le "Noto Sans Tai Le")
                  (set-fontset-font t 'tai-lue "Noto Sans NewTaiLue")
                  (set-fontset-font t 'buginese "Noto Sans Buginese")
                  (set-fontset-font t 'tai-tham "Noto Sans Tai Tham")
                  (set-fontset-font t 'balinese "Noto Sans Balinese")
                  (set-fontset-font t 'sundanese "Noto Sans Sundanese")
                  (set-fontset-font t 'vedic "Noto Sans Devanagari")
                  (set-fontset-font t 'symbol "Noto Sans CJK JP")
                  (set-fontset-font t 'symbol "Noto Sans Symbols2" nil 'append)
                  (set-fontset-font t 'symbol "Noto Sans" nil 'append)
                  (set-fontset-font t 'symbol "Noto Sans Math" nil 'append)
                  (set-fontset-font t 'symbol "Noto Emoji" nil 'append)
                  (set-fontset-font t 'symbol "Noto Sans Symbols" nil 'append)
                  (set-fontset-font t 'braille "Noto Sans Symbols2")
                  (set-fontset-font t 'batak "Noto Sans Batak")
                  (set-fontset-font t 'lepcha "Noto Sans Lepcha")
                  (set-fontset-font t 'ol-chiki "Noto Sans Ol Chiki")
                  (set-fontset-font t 'glagolitic "Noto Sans Glagolitic")
                  (set-fontset-font t 'tifinagh "Noto Sans Tifinagh")
                  (set-fontset-font t 'han "Noto Sans CJK JP")
                  (set-fontset-font t 'ideographic-description "Noto Sans CJK JP")
                  (set-fontset-font t 'cjk-misc "Noto Sans CJK JP")
                  (set-fontset-font t 'kana "Noto Sans CJK JP")
                  (set-fontset-font t 'bopomofo "Noto Sans CJK TC")
                  (set-fontset-font t 'kanbun "Noto Sans CJK JP")
                  (set-fontset-font t 'yi "Noto Sans Yi")
                  (set-fontset-font t 'lisu "Noto Sans Lisu")
                  (set-fontset-font t 'vai "Noto Sans Vai")
                  (set-fontset-font t 'bamum "Noto Sans Bamum")
                  (set-fontset-font t 'syloti-nagri "Noto Sans Syloti Nagri")
                  (set-fontset-font t 'north-indic-number "Noto Sans Devanagari")
                  (set-fontset-font t 'phags-pa "Noto Sans Phags Pa")
                  (set-fontset-font t 'saurashtra "Noto Sans Saurashtra")
                  (set-fontset-font t 'kayah-li "Noto Sans Kayah Li")
                  (set-fontset-font t 'rejang "Noto Sans Rejang")
                  (set-fontset-font t 'javanese "Noto Sans Javanese")
                  (set-fontset-font t 'cham "Noto Sans Cham")
                  (set-fontset-font t 'tai-viet "Noto Sans Tai Viet")
                  (set-fontset-font t 'meetei-mayek "Noto Sans Meetei Mayek")
                  (set-fontset-font t 'vertical-form "Noto Sans CJK JP")
                  (set-fontset-font t '(#xfe50 . #xfe6b) "Noto Sans CJK JP") ; symbol
                  (set-fontset-font t '(#xfff9 . #xfffb) "Noto Sans Symbols2") ; nil
                  (set-fontset-font t 'linear-b "Noto Sans Linear B")
                  (set-fontset-font t 'aegean-number "Noto Sans Linear B")
                  (set-fontset-font t 'ancient-greek-number "Noto Sans Symbols2")
                  (set-fontset-font t 'ancient-symbol "Noto Sans Symbols2")
                  (set-fontset-font t 'phaistos-disc "Noto Sans Symbols2")
                  (set-fontset-font t 'lycian "Noto Sans Lycian")
                  (set-fontset-font t 'carian "Noto Sans Carian")
                  (set-fontset-font t 'old-italic "Noto Sans Old Italic")
                  (set-fontset-font t 'gothic "Noto Sans Gothic")
                  (set-fontset-font t 'old-permic "Noto Sans Old Permic")
                  (set-fontset-font t 'ugaritic "Noto Sans Ugaritic")
                  (set-fontset-font t 'old-persian "Noto Sans OldPersian")
                  (set-fontset-font t 'deseret "Noto Sans Deseret")
                  (set-fontset-font t 'shavian "Noto Sans Shavian")
                  (set-fontset-font t 'osmanya "Noto Sans Osmanya")
                  (set-fontset-font t 'osage "Noto Sans Osage")
                  (set-fontset-font t 'elbasan "Noto Sans Elbasan")
                  (set-fontset-font t 'caucasian-albanian "Noto Sans CaucAlban")
                  (set-fontset-font t 'linear-a "Noto Sans Linear A")
                  (set-fontset-font t 'cypriot-syllabary "Noto Sans Cypriot")
                  (set-fontset-font t 'aramaic "Noto Sans ImpAramaic")
                  (set-fontset-font t 'palmyrene "Noto Sans Palmyrene")
                  (set-fontset-font t 'nabataean "Noto Sans Nabataean")
                  (set-fontset-font t 'hatran "Noto Sans Hatran")
                  (set-fontset-font t 'phoenician "Noto Sans Phoenician")
                  (set-fontset-font t 'lydian "Noto Sans Lydian")
                  (set-fontset-font t 'meroitic "Noto Sans Meroitic")
                  (set-fontset-font t 'kharoshthi "Noto Sans Kharoshthi")
                  (set-fontset-font t 'old-south-arabian "Noto Sans OldSouArab")
                  (set-fontset-font t 'old-north-arabian "Noto Sans OldNorArab")
                  (set-fontset-font t 'manichaean "Noto Sans Manichaean")
                  (set-fontset-font t 'avestan "Noto Sans Avestan")
                  (set-fontset-font t 'inscriptional-parthian "Noto Sans Inscriptional Parthian")
                  (set-fontset-font t 'inscriptional-pahlavi "Noto Sans Inscriptional Pahlavi")
                  (set-fontset-font t 'psalter-pahlavi "Noto Sans PsaPahlavi")
                  (set-fontset-font t 'old-turkic "Noto Sans Old Turkic")
                  (set-fontset-font t 'old-hungarian "Noto Sans OldHung")
                  (set-fontset-font t 'hanifi-rohingya "Noto Sans HanifiRohg")
                  (set-fontset-font t 'rumi-number "Noto Sans Symbols2")
                  (set-fontset-font t 'old-sogdian "Noto Sans OldSogdian")
                  (set-fontset-font t 'sogdian "Noto Sans Sogdian")
                  (set-fontset-font t 'elymaic "Noto Sans Elymaic")
                  (set-fontset-font t 'brahmi "Noto Sans Brahmi")
                  (set-fontset-font t 'kaithi "Noto Sans Kaithi")
                  (set-fontset-font t 'sora-sompeng "Noto Sans SoraSomp")
                  (set-fontset-font t 'chakma "Noto Sans Chakma")
                  (set-fontset-font t 'mahajani "Noto Sans Mahajani")
                  (set-fontset-font t 'sharada "Noto Sans Sharada")
                  (set-fontset-font t 'sinhala-archaic-number "Noto Sans Sinhala")
                  (set-fontset-font t 'khojki "Noto Sans Khojki")
                  (set-fontset-font t 'multani "Noto Sans Multani")
                  (set-fontset-font t 'khudawadi "Noto Sans Khudawadi")
                  (set-fontset-font t 'grantha "Noto Sans Grantha")
                  (set-fontset-font t 'newa "Noto Sans Newa")
                  (set-fontset-font t 'tirhuta "Noto Sans Tirhuta")
                  (set-fontset-font t 'siddham "Noto Sans Siddham")
                  (set-fontset-font t 'modi "Noto Sans Modi")
                  (set-fontset-font t 'takri "Noto Sans Takri")
                  (set-fontset-font t 'ahom "Noto Serif Ahom")
                  (set-fontset-font t 'dogra "Noto Serif Dogra")
                  (set-fontset-font t 'warang-citi "Noto Sans WarangCiti")
                  (set-fontset-font t 'zanabazar-square "Noto Sans Zanabazar")
                  (set-fontset-font t 'soyombo "Noto Sans Soyombo")
                  (set-fontset-font t 'pau-cin-hau "Noto Sans PauCinHau")
                  (set-fontset-font t 'bhaiksuki "Noto Sans Bhaiksuki")
                  (set-fontset-font t 'marchen "Noto Sans Marchen")
                  (set-fontset-font t 'masaram-gondi "Noto Sans Masaram Gondi")
                  (set-fontset-font t 'gunjala-gondi "Noto Sans Gunjala Gondi")
                  (set-fontset-font t 'cuneiform "Noto Sans Cuneiform")
                  (set-fontset-font t 'cuneiform-numbers-and-punctuation "Noto Sans Cuneiform")
                  (set-fontset-font t 'egyptian "Noto Sans EgyptHiero")
                  (set-fontset-font t 'anatolian "Noto Sans AnatoHiero")
                  (set-fontset-font t 'mro "Noto Sans Mro")
                  (set-fontset-font t 'bassa-vah "Noto Sans Bassa Vah")
                  (set-fontset-font t 'pahawh-hmong "Noto Sans Pahawh Hmong")
                  (set-fontset-font t 'miao "Noto Sans Miao")
                  (set-fontset-font t 'tangut "Noto Serif Tangut")
                  (set-fontset-font t 'tangut-components "Noto Serif Tangut")
                  (set-fontset-font t '(#x16fe0 . #x16fe0) "Noto Serif Tangut")
                  (set-fontset-font t 'duployan-shorthand "Noto Sans Duployan")
                  (set-fontset-font t 'byzantine-musical-symbol "Noto Music")
                  (set-fontset-font t 'musical-symbol "Noto Music")
                  (set-fontset-font t 'ancient-greek-musical-notation "Noto Music")
                  (set-fontset-font t 'mayan-numeral "Noto Sans Mayan Numerals")
                  (set-fontset-font t 'tai-xuan-jing-symbol "Noto Sans Symbols2")
                  (set-fontset-font t 'counting-rod-numeral "Noto Sans Symbols2")
                  (set-fontset-font t 'mathematical "Noto Sans Math")
                  (set-fontset-font t 'wancho "Noto Sans Wancho")
                  (set-fontset-font t 'mende-kikakui "Noto Sans Mende Kikakui")
                  (set-fontset-font t 'adlam "Noto Sans Adlam")
                  (set-fontset-font t 'indic-siyaq-number "Noto Sans Indic Siyaq Numbers")
                  (set-fontset-font t '(#x1ee00 . #x1eeff) "Noto Sans Math") ; arabic
                  (set-fontset-font t 'mahjong-tile "Noto Sans Symbols2")
                  (set-fontset-font t 'domino-tile "Noto Sans Symbols2")
                  (set-fontset-font t 'playing-cards "Noto Sans Symbols2")

                  ;; non Noto fonts
                  (set-fontset-font t 'kana "UniHentaiKana" nil 'append)
                  (set-fontset-font t 'latin "Iosevka" nil 'append)
                  (set-fontset-font t 'symbol "Iosevka" nil 'append)

                  ;; Nerd Font (defined thru -#xfd46)
                  (set-fontset-font t '( #xe000 .  #xf136) "Inconsolata Nerd Font"))))
#+end_src
** キーコマンド入力中に入力過程をミニバッファに反映する
#+begin_src emacs-lisp :tangle yes
  (setq echo-keystrokes 0.1)
#+end_src
** recursive minibuffers
#+begin_src emacs-lisp :tangle yes
  (setq enable-recursive-minibuffers t)
#+end_src
** inhibit-compacting-font-caches
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-compacting-font-caches t)
#+end_src
** save-place-mode
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook #'save-place-mode)
#+end_src
** enable-local-variables
#+begin_src emacs-lisp :tangle yes
  (setopt enable-local-variables :all)
#+end_src
** password
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'password-cache
    (setopt password-cache t)
    (setopt password-cache-expiry 3600))
#+end_src
** tab-width
#+begin_src emacs-lisp :tangle yes
  (setq tab-width 4)
#+end_src
** indentはspaceにする
#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-startup-hook
            #'(lambda ()
                (indent-tabs-mode nil)))
#+end_src
** 検索で大文字小文字を区別しない
#+begin_src emacs-lisp :tangle yes
  (with-eval-after-load 'minibuffer
    (setopt read-file-name-completion-ignore-case t))

  (setq read-buffer-completion-ignore-case t)
  (setq completion-ignore-case t)
#+end_src
* Language
** apache-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(apache-mode) "apache-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.htaccess$" . apache-mode))
#+end_src
** TODO bazel-mode
#+begin_src emacs-lisp :tangle yes
  ;; (autoload-if-found '(bazel-mode) "bazel" nil t)
#+end_src
** bison-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(bison-mode flex-mode jison-mode) "bison-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.y\\'" . bison-mode))
  (add-to-list 'auto-mode-alist '("\\.l\\'" . flex-mode))
  (add-to-list 'auto-mode-alist '("\\.jison\\'" . jison-mode))
#+end_src
** cask-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(cask-mode) "cask-mode" nil t)

  (add-to-list 'auto-mode-alist '("/Cask\\'" . cask-mode))
#+end_src
** cfn-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(cfn-mode) "cfn-mode" nil t)
  ;; (autoload-if-found '(flycheck-cfn-setup) "flycheck-cfn" nil t)

  (add-to-list 'magic-mode-alist '("\\(---\n\\)?AWSTemplateFormatVersion:" . cfn-mode))

  ;; (with-eval-after-load 'cfn-mode
  ;;   (add-hook 'cfn-mode-hook #'flycheck-cfn-setup))
#+end_src
** clojure-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(clojure-mode clojurescript-mode) "clojure-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.clj$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs$" . clojurescript-mode))

  (with-eval-after-load 'clojure-mode
    ;; config
    (setopt clojure-toplevel-inside-comment-form t))
#+END_SRC
** cmake-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(cmake-mode) "cmake-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.cmake$" . cmake-mode))
#+END_SRC
** coffee-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(coffee-mode) "coffee-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
#+END_SRC
** conf-mode
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.cnf$" . conf-mode))
  (add-to-list 'auto-mode-alist '("yabairc$" . conf-mode))
  (add-to-list 'auto-mode-alist '("skhdrc$" . conf-mode))
#+end_src
** crontab-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(crontab-mode) "crontab-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.?cron\\(tab\\)?\\'" . crontab-mode))
#+end_src
** csharp-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(csharp-mode) "csharp-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.cs$" . csharp-mode))
#+END_SRC
** csv-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(csv-mode) "csv-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.csv$" . csv-mode))
#+END_SRC
** cuda-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(cuda-mode) "cuda-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.cu$" . cuda-mode))
#+end_src
** crystal-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(crystal-mode) "crystal-mode" nil t)

  (add-to-list 'auto-mode-alist '("Projectfile$" . crystal-mode))
  (add-to-list 'auto-mode-alist
               (cons (purecopy (concat "\\(?:\\."
                                       "cr"
                                       "\\)\\'")) 'crystal-mode))
#+end_src
** dart-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(dart-mode) "dart-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.dart$" . dart-mode))
#+end_src
** TODO dbd-mode
#+begin_src emacs-lisp :tangle yes
  ;; (eval-when-compile
  ;;   (el-clone :repo "ccod/dbd-mode"))

  ;; (with-delayed-execution
  ;;   (message "Install dbd-mode...")
  ;;   (add-to-list 'load-path (locate-user-emacs-file "el-clone/dbd-mode"))

  ;;   (autoload-if-found '(dbdiagram-mode) "dbdiagram-mode" nil t)

  ;;   (add-to-list 'auto-mode-alist '("\\.dbd\\'" . dbdiagram-mode))
  ;;   (add-to-list 'auto-mode-alist '("\\.dbml\\'" . dbdiagram-mode)))
#+end_src
** dhall-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(dhall-mode) "dhall-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.dhall$" . dhall-mode))
#+end_src
** TODO direnv-mode
#+begin_src emacs-lisp :tangle yes
  ;; (eval-when-compile
  ;;   (el-clone :repo "wbolster/emacs-direnv"))

  ;; (with-delayed-execution
  ;;   (message "Install direnv-mode...")
  ;;   (add-to-list 'load-path (locate-user-emacs-file "el-clone/emacs-direnv"))

  ;;   (autoload-if-found '(direnv-mode direnv-envrc-mode) "direnv" nil t)
  ;;   (add-to-list 'auto-mode-alist '("\\.envrc" . direnv-envrc-mode)))
#+end_src
** docker-compose-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(docker-compose-mode) "docker-compose-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\docker-compose*" . docker-compose-mode))
#+end_src
** dockerfile-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(dockerfile-mode) "dockerfile-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\Dockerfile$" . dockerfile-mode))
  (add-to-list 'auto-mode-alist '("\\Dockerfile_Ecs$" . dockerfile-mode))
  (add-to-list 'auto-mode-alist '("\\Dockerfile_EcsDeploy" . dockerfile-mode))

  (with-eval-after-load 'dockerfile-mode
    (add-hook 'dockerfile-mode-hook #'flycheck-mode))
#+END_SRC
** dotenv-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(dotenv-mode) "dotenv-mode" nil t)

  (add-to-list 'auto-mode-alist '(".env" . dotenv-mode))
  (add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode))
#+end_src
** elixir-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(elixir-mode) "elixir-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.elixir$" . elixir-mode))
  (add-to-list 'auto-mode-alist '("\\.ex$" . elixir-mode))
  (add-to-list 'auto-mode-alist '("\\.exs$" . elixir-mode))
  (add-to-list 'auto-mode-alist '("mix\\.lock" . elixir-mode))
#+end_src
** elm-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(elm-mode) "elm-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.elm$" . elm-mode))
#+end_src
** emacs-lisp-mode
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("Keg" . emacs-lisp-mode))
#+end_src
** fish-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(fish-mode) "fish-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.fish$" . fish-mode))

  (with-eval-after-load 'fish-mode
    (setopt fish-enable-auto-indent t))
#+END_SRC
** forth-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(forth-mode) "forth-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.f$" . forth-mode))
  (add-to-list 'auto-mode-alist '("\\.fs$" . forth-mode))
  (add-to-list 'auto-mode-alist '("\\.fth$" . forth-mode))
  (add-to-list 'auto-mode-alist '("\\.forth$" . forth-mode))
  (add-to-list 'auto-mode-alist '("\\.4th$" . forth-mode))
#+end_src
** fortran
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(f90-mode) "f90" nil t)

  (add-to-list 'auto-mode-alist '("\\.f\\(y90\\|y?pp\\)\\'" . f90-mode))
#+end_src
** fsharp-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(fsharp-mode) "fsharp-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.fs[iylx]?$" . fsharp-mode))
#+end_src
** git-modes
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(gitignore-mode gitconfig-mode gitattributes-mode) "git-modes" nil t)

  ;; gitignore-mode
  (add-to-list 'auto-mode-alist '("\\.dockerignore$" . gitignore-mode))
  (add-to-list 'auto-mode-alist '("\\.gitignore$" . gitignore-mode))
  (add-to-list 'auto-mode-alist '("\\.prettierignore$" . gitignore-mode))
  (add-to-list 'auto-mode-alist '("/git/ignore\\'" . gitignore-mode))
  (add-to-list 'auto-mode-alist '("/git/ignore\\'" . gitignore-mode))
  (add-to-list 'auto-mode-alist '("CODEOWNERS" . gitignore-mode))

  ;; gitconfig-mode
  (add-to-list 'auto-mode-alist '("\\.git-pr-release$" . gitconfig-mode))
  (add-to-list 'auto-mode-alist '("\\.editorconfig$" . gitconfig-mode))
  (add-to-list 'auto-mode-alist '("\\.gitconfig$" . gitconfig-mode))
  (add-to-list 'auto-mode-alist '("/\\.git/config\\'" . gitconfig-mode))
  (add-to-list 'auto-mode-alist '("/modules/.*/config\\'" . gitconfig-mode))
  (add-to-list 'auto-mode-alist '("/git/config\\'" . gitconfig-mode))
  (add-to-list 'auto-mode-alist '("/\\.gitmodules\\'" . gitconfig-mode))
  (add-to-list 'auto-mode-alist '("/etc/gitconfig\\'" . gitconfig-mode))

  ;; gitattributes
  (add-to-list 'auto-mode-alist '("/\\.gitattributes\\'" . gitattributes-mode))
  (add-to-list 'auto-mode-alist '("\.gitattributes$" . gitattributes-mode))
  (add-to-list 'auto-mode-alist '("/info/attributes\\'" . gitattributes-mode))
  (add-to-list 'auto-mode-alist '("/git/attributes\\'" . gitattributes-mode))
#+end_src
** glsl-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(glsl-mode) "glsl-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.vsh$" . glsl-mode))
  (add-to-list 'auto-mode-alist '("\\.fsh$" . glsl-mode))
#+END_SRC
** go-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(go-mode) "go-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.go$" . go-mode))
  (add-to-list 'auto-mode-alist '("^go.mod$" . go-mode))

  (with-eval-after-load 'go-mode
    ;; config
    (setopt gofmt-command "goimports")

    ;; hook
    (add-hook 'before-save-hook #'gofmt-before-save))
#+END_SRC
** gradle-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(gradle-mode) "gradle-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.gradle$" . gradle-mode))
#+END_SRC
** graphql-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(graphql-mode) "graphql-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.graphql\\'" . graphql-mode))

  (with-eval-after-load 'graphql-mode
    (setopt graphql-indent-level 4))
#+end_src
** graphviz-dot-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(graphviz-dot-mode) "graphviz-dot-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode))
  (add-to-list 'auto-mode-alist '("\\.gv\\'" . graphviz-dot-mode))

  (with-eval-after-load 'graphviz-dot-mode
    (setopt graphviz-dot-auto-indent-on-semi nil)
    (setopt graphviz-dot-indent-width 2))
#+end_src
** groovy-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(groovy-mode) "groovy-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode))
  (add-to-list 'auto-mode-alist '("/Jenkinsfile\\'" . groovy-mode))
  (add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))
#+end_src
** hack-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(hack-mode) "hack-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.hack$" . hack-mode))
  (add-to-list 'auto-mode-alist '("\\.hck$" . hack-mode))
  (add-to-list 'auto-mode-alist '("\\.hhi$" . hack-mode))
#+end_src
** haskell-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(haskell-mode) "haskell-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))
  (add-to-list 'auto-mode-alist '("\\.cable$" . haskell-mode))
#+END_SRC
** hcl-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(hcl-mode) "hcl-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.hcl$" . hcl-mode))
#+end_src
** hy-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(hy-mode) "hy-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.hy$" . hy-mode))
#+end_src
** ini-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(ini-mode) "ini-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.ini$" . ini-mode))
#+end_src
** jade-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(jade-mode) "jade-mode" nil t)
  (autoload-if-found '(stylus-mode) "stylus-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.jade$" . jade-mode))
  (add-to-list 'auto-mode-alist '("\\.styl\\'" . stylus-mode))
#+end_src
** java-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(java-mode) "java-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.java$" . java-mode))
#+end_src
** js2-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(js2-mode) "js2-mode" nil t)

  ;; js2-mode
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.mjs$" . js2-mode))

  (with-eval-after-load 'js2-mode
    ;; config
    (setopt js2-strict-missing-semi-warning nil)
    (setopt js2-missing-semi-one-line-override nil))
#+END_SRC
** json-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(json-mode) "json-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.textlintrc$" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.prettierrc$" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.markuplintrc$" . json-mode))

  (with-eval-after-load 'json-mode
    (add-hook 'json-mode-hook #'flycheck-mode))
#+END_SRC
** jsonnet-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(jsonnet-mode
                       jsonnet-eval-buffer
                       jsonnet-jump
                       jsonnet-reformat-buffer) "jsonnet-mode" nil t)

  (add-to-list 'auto-mode-alist (cons "\\.jsonnet\\'" 'jsonnet-mode))
  (add-to-list 'auto-mode-alist (cons "\\.libsonnet\\'" 'jsonnet-mode))

  (with-eval-after-load 'jsonnet-mode
    ;; config
    (setopt jsonnet-indent-level 4)

    ;; keybind
    (define-key jsonnet-mode-map (kbd "C-c C-c") #'jsonnet-eval-buffer)
    (define-key jsonnet-mode-map (kbd "C-c C-f") #'jsonnet-jump)
    (define-key jsonnet-mode-map (kbd "C-c C-r") #'jsonnet-reformat-buffer))
#+end_src
** kotlin-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(kotlin-mode) "kotlin-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.kts?\\'" . kotlin-mode))
#+end_src
** lisp-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(lisp-mode) "lisp-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.lemrc$" . lisp-mode))
  (add-to-list 'auto-mode-alist '("\\.sbclrc$" . lisp-mode))
#+END_SRC
** lua-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(lua-mode) "lua-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
#+end_src
** markdown-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(markdown-mode) "markdown-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))

  (with-eval-after-load 'markdown-mode
    ;; config
    (setopt markdown-code-lang-modes (append '(("diff" . diff-mode)
                                               ("hs" . haskell-mode)
                                               ("html" . web-mode)
                                               ("ini" . conf-mode)
                                               ("js" . web-mode)
                                               ("jsx" . web-mode)
                                               ("md" . markdown-mode)
                                               ("pl6" . raku-mode)
                                               ("py" . python-mode)
                                               ("rb" . ruby-mode)
                                               ("rs" . rustic-mode)
                                               ("sqlite3" . sql-mode)
                                               ("ts" . typescript-mode)
                                               ("typescript" . typescript-mode)
                                               ("tsx" . web-mode)
                                               ("yaml". yaml-mode)
                                               ("zsh" . sh-mode)
                                               ("php" . php-mode))
                                             markdown-code-lang-modes))

    ;; markdown
    (add-hook 'markdown-mode #'orgtbl-mode))
#+END_SRC
** mermaid-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(mermaid-mode) "mermaid-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.mmd\\'" . mermaid-mode))
#+end_src
** makefile-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(makefile-mode) "makefile-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.mk$" . makefile-mode))
  (add-to-list 'auto-mode-alist '("Makefile" . makefile-mode))

  (with-eval-after-load 'makefile-mode
    ;; config
    (setopt makefile-electric-keys t)

    ;; hook
    (add-hook 'makefile-mode-hook #'flycheck-mode))
#+end_src
** nasm-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(nasm-mode) "nasm-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.s$" . nasm-mode))
#+end_src
** neon-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(neon-mode) "neon-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.neon$" . neon-mode))
#+end_src
** nim-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(nim-mode) "nim-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.nim\\'" . nim-mode))
#+end_src
** ninja-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(ninja-mode) "ninja-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.ninja$" . ninja-mode))
#+end_src
** nix-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(nix-mode) "nix-mode" nil t)
  (autoload-if-found '(nix-drv-mode) "nix-drv-mode" nil t)
  (autoload-if-found '(nix-shell-unpack nix-shell-configure nix-shell-build) "nix-shell" nil t)
  (autoload-if-found '(nix-repl) "nix-repl" nil t)
  (autoload-if-found '(nix-format-before-save) "nix-format" nil t)

  (add-to-list 'auto-mode-alist '("\\.nix$" . nix-mode))
  (add-to-list 'auto-mode-alist '("\\.drv$" . nix-drv-mode))

  (add-hook 'before-save-hook #'nix-format-before-save)
#+end_src
** nginx-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(nginx-mode) "nginx-mode" nil t)

  (add-to-list 'auto-mode-alist '("nginx\\.conf\\'" . nginx-mode))
  (add-to-list 'auto-mode-alist '("/nginx/.+\\.conf\\'" . nginx-mode))
  (add-to-list 'auto-mode-alist '("/nginx/sites-\\(?:available\\|enabled\\)/" . nginx-mode))

  (with-eval-after-load 'nginx-mode
    (setopt nginx-indent-tabs-mode t))
#+END_SRC
** nov-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(nov-mode) "nov" nil t)

  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

  (with-eval-after-load 'nov
    (add-hook 'nov-mode-hook #'(lambda () (view-mode -1))))
#+end_src
** pcap-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(pcap-mode) "pcap" nil t)

  (add-to-list 'auto-mode-alist '("\\.pcap$" . pcap-mode))
#+end_src
** TODO phel-mode
#+begin_src emacs-lisp :tangle yes
  ;; (with-delayed-execution
  ;;   (message "Install phel-mode...")

  ;;   (define-derived-mode phel-mode clojure-mode "Phel"
  ;;     "Major mode for editing Phel language source files."
  ;;     (setopt-local comment-start "#")
  ;;     ;; We disable lockfiles so that ILT evaluation works.
  ;;     ;; The lockfiles seem to modify the buffer-file-name somehow, when the buffer changes
  ;;     ;; And that is detected by the currently running Phel process.
  ;;     ;; That interferes with evaluation, as the running Phel process starts behaving badly because of that.
  ;;     (setopt-local create-lockfiles nil)
  ;;     )

  ;;   (add-to-list 'auto-mode-alist '("\\.phel$" . phel-mode)))
#+end_src
** php-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(php-mode php-current-class php-current-namespace) "php-mode" nil t)
  (autoload-if-found '(php-format-this-buffer-file
                       php-format-project
                       php-format-on-after-save-hook
                       php-format-auto-mode) "php-format" nil t)

  (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))

  (with-eval-after-load 'php-mode
    ;; hook
    (add-hook 'php-mode-hook #'php-format-auto-mode)

    ;; keybind
    (define-key php-mode-map (kbd "C-c C--") #'php-current-class)
    (define-key php-mode-map (kbd "C-c C-=") #'php-current-namespace)
    (define-key php-mode-map (kbd "C-.") nil)

    ;; config
    (setopt php-mode-coding-style 'psr2)

    ;; phpstan
    (define-derived-mode phpstan-mode php-mode "phpstan"))
#+END_SRC
** phpt-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(phpt-mode) "phpt-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.phpt$" . phpt-mode))
#+end_src
** plantuml-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(plantuml-mode) "plantuml-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.pu$" . plantuml-mode))
#+END_SRC
** protobuf-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(protobuf-mode) "protobuf-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.proto\\'" . protobuf-mode))
#+end_src
** pug-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(pug-mode) "pug-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.pug$" . pug-mode))
#+end_src
** prisma-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(prisma-mode) "prisma-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.prisma" . prisma-mode))
#+end_src
** processing-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(processing-mode) "processing-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.pde$" . processing-mode))

  (with-eval-after-load 'processing-mode
    (setopt processing-location "/opt/processing/processing-java")
    (setopt processing-output-dir "/tmp"))
#+END_SRC
** python-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(python-mode) "python-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.py$" . python-mode))
#+END_SRC
** qt-pro-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(qt-pro-mode) "qt-pro-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.pr[io]$" . qt-pro-mode))
#+end_src
** robots-txt-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(robots-txt-mode) "robots-txt-mode" nil t)

  (add-to-list 'auto-mode-alist '("/robots\\.txt\\'" . robots-txt-mode))
#+end_src
** ruby-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(ruby-mode) "ruby-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.irbrc$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Capfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Schemafile" . ruby-mode))
  (add-to-list 'auto-mode-alist '(".pryrc" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Fastfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Matchfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Procfile" . ruby-mode))
  (add-to-list 'auto-mode-alist '(".git-pr-template" . ruby-mode))
  (add-to-list 'auto-mode-alist '(".gemrc" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.Brewfile" . ruby-mode))

  (with-eval-after-load 'ruby-mode
    ;; config
    (setopt ruby-insert-encoding-magic-comment nil))
#+END_SRC
** rust-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(rust-mode) "rust-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.rs$" . rust-mode))

  (with-eval-after-load 'rust-mode
    (setopt rust-format-on-save t))
#+END_SRC
** scala-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(scala-mode) "scala-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.scala$" . scala-mode))
#+END_SRC
** scheme-mode
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.scheme$" . scheme-mode))
  (add-to-list 'auto-mode-alist '(".guix-channel" . scheme-mode))

  (with-eval-after-load 'scheme
    (setopt scheme-program-name "gosh -i"))
#+end_src
** scad-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(scad-mode) "scad-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.scad\\'" . scad-mode))
#+end_src
** scss-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(scss-mode) "scss-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.scss$" . scss-mode))
  (add-to-list 'auto-mode-alist '("\\.sass$" . scss-mode))

  (with-eval-after-load 'scss-mode
    (add-hook 'scss-mode-hook #'flycheck-mode))
#+end_src
** shell-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(shell-mode) "shell-mode" nil t)

  (define-derived-mode console-mode shell-mode "console")
#+end_src
** slim-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(slim-mode) "slim-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.slim$" . slim-mode))
#+END_SRC
** solidity-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(solidity-mode) "solidity-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.sol$" . solidity-mode))
#+end_src
** ssh-config-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(ssh-config-mode ssh-known-hosts-mode ssh-authorized-keys-mode) "ssh-config-mode" nil t)

  (add-to-list 'auto-mode-alist '("/\\.ssh/config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("/sshd?_config\\(\\.d/.*\\.conf\\)?\\'" . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("/known_hosts\\'" . ssh-config-mode))
  (add-to-list 'auto-mode-alist '("/authorized_keys2?\\'" . ssh-config-mode))
#+END_SRC
** TODO sql-mode
#+begin_src emacs-lisp :tangle yes
  ;; (with-eval-after-load 'sql
  ;;   (load-library "sql-indent")

  ;;   ;; config
  ;;   (setopt indent-tabs-mode nil)
  ;;   (setopt sql-user "root")
  ;;   (setopt sql-password "P@ssw0rd")
  ;;   (setopt sql-server "127.0.0.1")
  ;;   (setopt sql-port 13306)
  ;;   (setopt sql-mysql-login-params '(server port user password database))

  ;;   ;; hook
  ;;   (add-hook 'sql-mode-hook #'flycheck-mode))
#+end_src
** swift-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(swift-mode) "swift-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.swift$" . swift-mode))
#+end_src
** syslog-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(syslog-mode) "syslog-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.log$" . syslog-mode))
#+end_src
** TODO systemd-mode
#+begin_src emacs-lisp :tangle yes
  ;; (eval-when-compile
  ;;   (el-clone :repo "holomorph/systemd-mode"))

  ;; (with-delayed-execution
  ;;   (message "Install systemd-mode...")
  ;;   (add-to-list 'load-path (locate-user-emacs-file "el-clone/systemd-mode"))

  ;;   (autoload-if-found '(systemd-mode) "systemd" nil t)

  ;;   (add-to-list 'auto-mode-alist '("\\.nspawn\\'" . systemd-mode))
  ;;   (add-to-list 'auto-mode-alist `(,(rx (+? (any "a-zA-Z0-9-_.@\\")) "."
  ;;                                        (or "automount" "busname" "mount" "service" "slice"
  ;;                                            "socket" "swap" "target" "timer" "link" "netdev" "network")
  ;;                                        string-end)
  ;;                                   . systemd-mode))
  ;;   (add-to-list 'auto-mode-alist `(,(rx ".#"
  ;;                                        (or (and (+? (any "a-zA-Z0-9-_.@\\")) "."
  ;;                                                 (or "automount" "busname" "mount" "service" "slice"
  ;;                                                     "socket" "swap" "target" "timer" "link" "netdev" "network"))
  ;;                                            "override.conf")
  ;;                                        (= 16 (char hex-digit)) string-end)
  ;;                                   . systemd-mode))
  ;;   (add-to-list 'auto-mode-alist `(,(rx "/systemd/" (+? anything) ".d/" (+? (not (any ?/))) ".conf" string-end)
  ;;                                   . systemd-mode)))
#+end_src
** terraform-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(terraform-mode terraform-format-on-save-mode) "terraform-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.tf$" . terraform-mode))

  (with-eval-after-load 'terraform-mode
    (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode)
    (add-hook 'terraform-mode-hook #'flycheck-mode))
#+END_SRC
** text-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(conf-space-mode) "conf-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.tigrc$" . conf-space-mode))
  (add-to-list 'auto-mode-alist '("\\.editrc$" . conf-space-mode))
  (add-to-list 'auto-mode-alist '("\\.inputrc$" . conf-space-mode))
  (add-to-list 'auto-mode-alist '("\\.colorrc$" . conf-space-mode))
  (add-to-list 'auto-mode-alist '("\\.asdfrc$" . conf-space-mode))
  (add-to-list 'auto-mode-alist '("credentials$" . conf-space-mode))
#+end_src
** toml-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(toml-mode) "toml-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.toml$" . toml-mode))

  (with-eval-after-load 'toml-mode
    (add-hook 'toml-mode-hook #'flycheck-mode))
#+END_SRC
** tmux-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(tmux-mode) "tmux-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.tmux\\.conf$" . tmux-mode))
#+end_src
** typescript-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(typescript-mode) "typescript-mode" nil t)

  ;; for ts/deno
  (add-to-list 'auto-mode-alist '("\\.ts$" . typescript-mode))

  ;; for tsx
  (define-derived-mode typescript-tsx-mode typescript-mode "tsx")
  (add-to-list 'auto-mode-alist '("\\.jsx$" . typescript-tsx-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx$" . typescript-tsx-mode))
#+END_SRC
** v-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(v-mode v-menu v-format-buffer) "v-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\(\\.v?v\\|\\.vsh\\)$" . v-mode))

  (with-eval-after-load 'v-mode
    (define-key v-mode-map (kbd "M-z") #'v-menu)
    (define-key v-mode-map (kbd "C-c C-f") #'v-format-buffer))
#+end_src
** vue-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(vue-mode) "vue-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.vue$" . vue-mode))

  (with-eval-after-load 'vue-html-mode
    (setopt vue-html-extra-indent 4))
#+END_SRC
** vimrc-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(vimrc-mode) "vimrc-mode" nil t)

  (add-to-list 'auto-mode-alist '("vimrc" . vimrc-mode))
  (add-to-list 'auto-mode-alist '("\\.vim\\(rc\\)?\\'" . vimrc-mode))
#+end_src
** wat-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(wat-mode) "wat-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.wat?\\'" . wat-mode))
#+end_src
** web-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(web-mode) "web-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.gsp$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.svg$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.liquid$" . web-mode))

  (with-eval-after-load 'web-mode
    (setopt web-mode-comment-style 2)
    (setopt web-mode-enable-auto-pairing nil)
    (setopt web-mode-enable-auto-indentation nil))
#+END_SRC
** TODO web-php-blade-mode
#+begin_src emacs-lisp :tangle yes
  ;; (eval-when-compile
  ;;   (el-clone :repo "takeokunn/web-php-blade-mode"))

  ;; (with-delayed-execution
  ;;   (message "Install web-php-blade-mode...")
  ;;   (add-to-list 'load-path (locate-user-emacs-file "el-clone/web-php-blade-mode"))

  ;;   (autoload-if-found '(web-php-blade-mode) "web-php-blade-mode" nil t)

  ;;   (add-to-list 'auto-mode-alist '("\\.blade\\.php$" . web-php-blade-mode)))
#+end_src
** wolfram-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(wolfram-mode run-wolfram) "wolfram-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.m$" . wolfram-mode))
  (add-to-list 'auto-mode-alist '("\\.nb$" . wolfram-mode))
  (add-to-list 'auto-mode-alist '("\\.cbf$" . wolfram-mode))

  (with-eval-after-load 'wolfram-mode
    (setopt wolfram-path "path-to-dir"))
#+end_src
** yaml-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(yaml-mode) "yaml-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.ya?ml$" . yaml-mode))
  (add-to-list 'auto-mode-alist '("\\.aclpolicy$" . yaml-mode))

  (with-eval-after-load 'yaml-mode
    (add-hook 'yaml-mode-hook #'flycheck-mode))
#+END_SRC
** yarn-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(yarn-mode) "yarn-mode" nil t)

  (add-to-list 'auto-mode-alist '("yarn\\.lock\\'" . yarn-mode))
#+end_src
** zig-mode
#+begin_src emacs-lisp :tangle yes
  (autoload-if-found '(zig-mode) "zig-mode" nil t)

  (add-to-list 'auto-mode-alist '("\\.zig$" . zig-mode))
#+end_src
* Footer
** Magic File Name を有効にする
#+begin_src emacs-lisp :tangle yes
  (setq file-name-handler-alist my/saved-file-name-handler-alist)
#+end_src
** profilerを終了する
#+begin_src emacs-lisp :tangle yes
  (when my/enable-profile
    (profiler-report)
    (profiler-stop))
#+end_src
